// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/FileProtocol.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace File.Protobuf {

  /// <summary>Holder for reflection information generated from Proto/FileProtocol.proto</summary>
  public static partial class FileProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/FileProtocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FileProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhQcm90by9GaWxlUHJvdG9jb2wucHJvdG8SDUZpbGUuUHJvdG9idWYiOwoL",
            "RmlsZVJlcXVlc3QSDAoEcGF0aBgBIAEoCRIQCghmaWxlTmFtZRgCIAEoCRIM",
            "CgR0eXBlGAMgASgJIn4KCkZpbGVIZWFkZXISDQoFZXhpc3QYASABKAgSEAoI",
            "ZmlsZU5hbWUYAiABKAkSDAoEcGF0aBgDIAEoCRIMCgR0eXBlGAQgASgJEgwK",
            "BHRpbWUYBSABKAkSEQoJdG90bGVTaXplGAYgASgFEhIKCnRvdGxlQ291bnQY",
            "ByABKAUiXQoIRmlsZVBhY2sSEAoIZmlsZU5hbWUYASABKAkSDAoEdGltZRgC",
            "IAEoCRIRCglwYWNrSW5kZXgYAyABKAUSEAoIcGFja1NpemUYBCABKAUSDAoE",
            "ZGF0YRgFIAEoDCJoChBGaWxlUGFja1Jlc3BvbnNlEg8KB3N1Y2Nlc3MYASAB",
            "KAgSEAoIZmlsZU5hbWUYAiABKAkSEQoJcGFja0luZGV4GAMgASgFEhAKCHBh",
            "Y2tTaXplGAQgASgFEgwKBHRpbWUYBSABKAkiMQoMRmlsZVJlc3BvbnNlEg8K",
            "B3N1Y2Nlc3MYASABKAgSEAoIZmlsZU5hbWUYAiABKAliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::File.Protobuf.FileRequest), global::File.Protobuf.FileRequest.Parser, new[]{ "Path", "FileName", "Type" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::File.Protobuf.FileHeader), global::File.Protobuf.FileHeader.Parser, new[]{ "Exist", "FileName", "Path", "Type", "Time", "TotleSize", "TotleCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::File.Protobuf.FilePack), global::File.Protobuf.FilePack.Parser, new[]{ "FileName", "Time", "PackIndex", "PackSize", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::File.Protobuf.FilePackResponse), global::File.Protobuf.FilePackResponse.Parser, new[]{ "Success", "FileName", "PackIndex", "PackSize", "Time" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::File.Protobuf.FileResponse), global::File.Protobuf.FileResponse.Parser, new[]{ "Success", "FileName" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 文件请求
  /// </summary>
  public sealed partial class FileRequest : pb::IMessage<FileRequest> {
    private static readonly pb::MessageParser<FileRequest> _parser = new pb::MessageParser<FileRequest>(() => new FileRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FileRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::File.Protobuf.FileProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileRequest(FileRequest other) : this() {
      path_ = other.path_;
      fileName_ = other.fileName_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileRequest Clone() {
      return new FileRequest(this);
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fileName" field.</summary>
    public const int FileNameFieldNumber = 2;
    private string fileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FileRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FileRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Path != other.Path) return false;
      if (FileName != other.FileName) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Path.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Path);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FileName);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FileRequest other) {
      if (other == null) {
        return;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Path = input.ReadString();
            break;
          }
          case 18: {
            FileName = input.ReadString();
            break;
          }
          case 26: {
            Type = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 文件头
  /// </summary>
  public sealed partial class FileHeader : pb::IMessage<FileHeader> {
    private static readonly pb::MessageParser<FileHeader> _parser = new pb::MessageParser<FileHeader>(() => new FileHeader());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FileHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::File.Protobuf.FileProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileHeader(FileHeader other) : this() {
      exist_ = other.exist_;
      fileName_ = other.fileName_;
      path_ = other.path_;
      type_ = other.type_;
      time_ = other.time_;
      totleSize_ = other.totleSize_;
      totleCount_ = other.totleCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileHeader Clone() {
      return new FileHeader(this);
    }

    /// <summary>Field number for the "exist" field.</summary>
    public const int ExistFieldNumber = 1;
    private bool exist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Exist {
      get { return exist_; }
      set {
        exist_ = value;
      }
    }

    /// <summary>Field number for the "fileName" field.</summary>
    public const int FileNameFieldNumber = 2;
    private string fileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 3;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 5;
    private string time_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Time {
      get { return time_; }
      set {
        time_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "totleSize" field.</summary>
    public const int TotleSizeFieldNumber = 6;
    private int totleSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotleSize {
      get { return totleSize_; }
      set {
        totleSize_ = value;
      }
    }

    /// <summary>Field number for the "totleCount" field.</summary>
    public const int TotleCountFieldNumber = 7;
    private int totleCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotleCount {
      get { return totleCount_; }
      set {
        totleCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FileHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FileHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Exist != other.Exist) return false;
      if (FileName != other.FileName) return false;
      if (Path != other.Path) return false;
      if (Type != other.Type) return false;
      if (Time != other.Time) return false;
      if (TotleSize != other.TotleSize) return false;
      if (TotleCount != other.TotleCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Exist != false) hash ^= Exist.GetHashCode();
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Time.Length != 0) hash ^= Time.GetHashCode();
      if (TotleSize != 0) hash ^= TotleSize.GetHashCode();
      if (TotleCount != 0) hash ^= TotleCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Exist != false) {
        output.WriteRawTag(8);
        output.WriteBool(Exist);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FileName);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Path);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Type);
      }
      if (Time.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Time);
      }
      if (TotleSize != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TotleSize);
      }
      if (TotleCount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TotleCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Exist != false) {
        size += 1 + 1;
      }
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Time.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Time);
      }
      if (TotleSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotleSize);
      }
      if (TotleCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotleCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FileHeader other) {
      if (other == null) {
        return;
      }
      if (other.Exist != false) {
        Exist = other.Exist;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Time.Length != 0) {
        Time = other.Time;
      }
      if (other.TotleSize != 0) {
        TotleSize = other.TotleSize;
      }
      if (other.TotleCount != 0) {
        TotleCount = other.TotleCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Exist = input.ReadBool();
            break;
          }
          case 18: {
            FileName = input.ReadString();
            break;
          }
          case 26: {
            Path = input.ReadString();
            break;
          }
          case 34: {
            Type = input.ReadString();
            break;
          }
          case 42: {
            Time = input.ReadString();
            break;
          }
          case 48: {
            TotleSize = input.ReadInt32();
            break;
          }
          case 56: {
            TotleCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 文件分片
  /// </summary>
  public sealed partial class FilePack : pb::IMessage<FilePack> {
    private static readonly pb::MessageParser<FilePack> _parser = new pb::MessageParser<FilePack>(() => new FilePack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FilePack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::File.Protobuf.FileProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilePack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilePack(FilePack other) : this() {
      fileName_ = other.fileName_;
      time_ = other.time_;
      packIndex_ = other.packIndex_;
      packSize_ = other.packSize_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilePack Clone() {
      return new FilePack(this);
    }

    /// <summary>Field number for the "fileName" field.</summary>
    public const int FileNameFieldNumber = 1;
    private string fileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private string time_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Time {
      get { return time_; }
      set {
        time_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "packIndex" field.</summary>
    public const int PackIndexFieldNumber = 3;
    private int packIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PackIndex {
      get { return packIndex_; }
      set {
        packIndex_ = value;
      }
    }

    /// <summary>Field number for the "packSize" field.</summary>
    public const int PackSizeFieldNumber = 4;
    private int packSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PackSize {
      get { return packSize_; }
      set {
        packSize_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 5;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FilePack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FilePack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FileName != other.FileName) return false;
      if (Time != other.Time) return false;
      if (PackIndex != other.PackIndex) return false;
      if (PackSize != other.PackSize) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (Time.Length != 0) hash ^= Time.GetHashCode();
      if (PackIndex != 0) hash ^= PackIndex.GetHashCode();
      if (PackSize != 0) hash ^= PackSize.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FileName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FileName);
      }
      if (Time.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Time);
      }
      if (PackIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PackIndex);
      }
      if (PackSize != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PackSize);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (Time.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Time);
      }
      if (PackIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackIndex);
      }
      if (PackSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackSize);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FilePack other) {
      if (other == null) {
        return;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      if (other.Time.Length != 0) {
        Time = other.Time;
      }
      if (other.PackIndex != 0) {
        PackIndex = other.PackIndex;
      }
      if (other.PackSize != 0) {
        PackSize = other.PackSize;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FileName = input.ReadString();
            break;
          }
          case 18: {
            Time = input.ReadString();
            break;
          }
          case 24: {
            PackIndex = input.ReadInt32();
            break;
          }
          case 32: {
            PackSize = input.ReadInt32();
            break;
          }
          case 42: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FilePackResponse : pb::IMessage<FilePackResponse> {
    private static readonly pb::MessageParser<FilePackResponse> _parser = new pb::MessageParser<FilePackResponse>(() => new FilePackResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FilePackResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::File.Protobuf.FileProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilePackResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilePackResponse(FilePackResponse other) : this() {
      success_ = other.success_;
      fileName_ = other.fileName_;
      packIndex_ = other.packIndex_;
      packSize_ = other.packSize_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilePackResponse Clone() {
      return new FilePackResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "fileName" field.</summary>
    public const int FileNameFieldNumber = 2;
    private string fileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "packIndex" field.</summary>
    public const int PackIndexFieldNumber = 3;
    private int packIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PackIndex {
      get { return packIndex_; }
      set {
        packIndex_ = value;
      }
    }

    /// <summary>Field number for the "packSize" field.</summary>
    public const int PackSizeFieldNumber = 4;
    private int packSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PackSize {
      get { return packSize_; }
      set {
        packSize_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 5;
    private string time_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Time {
      get { return time_; }
      set {
        time_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FilePackResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FilePackResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (FileName != other.FileName) return false;
      if (PackIndex != other.PackIndex) return false;
      if (PackSize != other.PackSize) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (PackIndex != 0) hash ^= PackIndex.GetHashCode();
      if (PackSize != 0) hash ^= PackSize.GetHashCode();
      if (Time.Length != 0) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FileName);
      }
      if (PackIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PackIndex);
      }
      if (PackSize != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PackSize);
      }
      if (Time.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (PackIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackIndex);
      }
      if (PackSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackSize);
      }
      if (Time.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FilePackResponse other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      if (other.PackIndex != 0) {
        PackIndex = other.PackIndex;
      }
      if (other.PackSize != 0) {
        PackSize = other.PackSize;
      }
      if (other.Time.Length != 0) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            FileName = input.ReadString();
            break;
          }
          case 24: {
            PackIndex = input.ReadInt32();
            break;
          }
          case 32: {
            PackSize = input.ReadInt32();
            break;
          }
          case 42: {
            Time = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 文件接受响应
  /// </summary>
  public sealed partial class FileResponse : pb::IMessage<FileResponse> {
    private static readonly pb::MessageParser<FileResponse> _parser = new pb::MessageParser<FileResponse>(() => new FileResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FileResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::File.Protobuf.FileProtocolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileResponse(FileResponse other) : this() {
      success_ = other.success_;
      fileName_ = other.fileName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileResponse Clone() {
      return new FileResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "fileName" field.</summary>
    public const int FileNameFieldNumber = 2;
    private string fileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FileResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FileResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (FileName != other.FileName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FileName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FileResponse other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            FileName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
